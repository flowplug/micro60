[PTHS]
curp = /oct12024_60
sim_curp = /september062024
predict_original = /home/alan2/dev/resources/predict_original
predict_final = /home/alan2/dev/resources/predict_final
datafolder = /home/alan2/data
; label_dir is the folder that will be created to write
; the column_names_file for the training and validation data,
; The training and validation csv files will also be written here.
label_dir = /home/alan2/dev/resources/matcsvs
pybdir = pyb
data_load_summary = load_summary.txt
pickle_dir = /home/alan2/dev/resources/pickles
; Records for running live are kept in run folder
; Every time nu_loop.py runs, a new folder under
; runs is created in nu_loop.py with a unique time stamp.
runfolder = /home/alan2/dev/resources/runs
simfolder = /home/alan2/dev/resources/sims
; Under the folder with unique time stamp, sub folders are created
; for mat_check_dir, log_dir, and results_dir
; lpath is modified with a new timestamp each time nu_loop.py runs
lpath = None
; rpath is modified with each time nu_loop.py runs by
; adding results_dir to lpath
rpath =None
; chkpath is modified with each time nu_loop.py runs by
; adding mat_check_dir to lpath if write_prepend is y
chkpath = None
; Whether Brownian bridges are used or prior days' prices, physr.py reads the last number of intervals in the data
; window for each ticker from the most recent price pickle file into the begining of the shared memory array for each ticker.
; If write_prepend is y, the folder in mat_check_dir is created if it doesn't
; exist and the initial prices within the window are recorded in the mat_check_dir. If Brownian bridges
; are used, random, normally distributed price series starting and ending with the corresponding real time
; opening values are placed in the initial window and these random values are written in the mat_check_dir.
write_prepend = y
mat_check_dir = check_load_yesterday_prices
; If log_goin is y, log the input array used for prediction in exembuy() and exemsell() in strundow(),
; log_goin is only used when running live.
; goin is modified with each time nu_loop.py runs by
; adding mat_check_dir to lpath if log_goin is y
goin = None
log_goin = n
log_goin_sim = n
log_dir = logs
results_dir = results
pred_shape_file = prediction_matrix_shapes.txt
; For debugging purposes only, if log_candles is y and live is y, a folder with the name
; in candle_dir is created if needed and the open, high, low, close (ohlc) values for each ticker are
; written to a file candles.txt in the candle_dir folder. For each ticker, the data from the begining
; interval to the current inverval are repeatedly written. This is so time consuming that the processing
; for the calculated series might be unreliable. It purpse is to do a sanity check on the ohlc values.
log_candles = n
candle_dir = candles
candr = None
; The unordered vector is one column of two dimensional arrays created in struct_hist.mind. 
; There are two such arrays, mind.calct for training data and mind.calcv for the validation data.
; There is one row for each of the calculated series. The columns are successive time intervals.
; The ordered version is obtained elsewhere by ranking the time series by importance,
; with the most important series last.
buy_prediction_input_vector_file_unordered = buy_piv_float_unordered.csv
sell_prediction_input_vector_file_unordered = sell_piv_float_unordered.csv
; The argument order of the first prediction module, disregarding the
; tak variable, is used as an example. This will likely be the same
; for all prediction modules.
buy_pred_dex = buy_pred_dex_int.csv
sell_pred_dex = sell_pred_dex_int.csv
buy_prediction_input_vector_file_ordered = buy_piv_float_ordered.csv
sell_prediction_input_vector_file_ordered = sell_piv_float_ordered.csv

buy_prediction_arg_unordered = buy_arg_dex_int_unordered.csv
sell_prediction_arg_unordered = sell_arg_dex_int_unordered.csv
buy_prediction_arg_ordered = buy_arg_float_ordered.csv
sell_prediction_arg_ordered = sell_arg_float_ordered.csv
buy_prediction_arg_dex = buy_arg_dex_int.csv
sell_prediction_arg_dex = sell_arg_dex_int.csv
xraydexfb = xraydex_int_fb.csv
xraydexfs = xraydex_int_fs.csv
xrayfloatfb = xrayfloatfb.csv
xrayfloatfs = xrayfloatfs.csv

[TRE]
fullntargs = /home/alan2/dev/resources/control/fetch_symbols/conflate_fulln_targs60.txt
conflate_fullx = /home/alan2/dev/resources/control/fetch_symbols/conflate_fullx.txt
conflate_fillx = /home/alan2/dev/resources/control/fetch_symbols/conflate_fillx.txt
tick_nasd_file = /home/alan2/dev/resources/control/fetch_symbols/tick_nasd.txt
tick_nyse_file = /home/alan2/dev/resources/control/fetch_symbols/tick_nyse.txt

[CALC]
train_targ = MSFT
sim_targ = SPY
sim_prob_filter = .9
sim_buy_min = 10
sim_sell_min = 7
sim_tran_capital = 2000
live = n
ib_data_gather = n
validate = y
train = y
beginvalidation = 2024 3 21 9 30 00
endvalidation = 2024 6 27 15 59 00
begintrain = 2024 6 28 9 30 00
endtrain =  2024 9 29 15 59 00
days_to_fetch = 132
days_ago = 2
initial_balance = 1000000
ib_interval = 1 min
decline = y
mark_data_cycles = y
local_timezone = America/New_York
; data window in intervals.
window = 95
min_window = 10
; min_window is primarily significant when training, the first min_window (actually zero to min_window minus 1)
; of all calculated series are zeros. But it is referenced in strun_live() in case of mishap.
procbuy = 12
procsell = 11
; Interval creation in seconds. Options are 1,5,10,15,30,60
intervall = 60
; if live == y, begtall marks begin hour, begin min, begin sec)
begtall = (0,0,0)
; if live == y, endall marks end hour, end min, end sec)
endall = (23,59,45)

; If prior_pickle is y, use the last 95 intervals
; from the most recent training pickle to fill the
; data window prior to the first entry.
prior_pickle = n
; If brownian_bridge is y, use brownian bridges to fill the
; data window prior to the first entry.
brownian_bridge = y
; Array length used, assuming one second intervals,
; accommodating  also 5,10,15,30, and 60 second intervals
; This assumes 15 second intervals. Only used when running live
array_len = 1560
column_names_file = calculated_series_column_names.txt
default_exchange = SMART
default_security_type = STK
default_currency = USD
para_tick_sec = TICK-NASD
crypto_tick_sec = AAPL
crypto_dex_sec = SPY
tick_sec = TICK-NYSE
dex_sec = DIA
std_fields =  Open,High,Low,Close
; Type 4 is last traded price at IB.
acceptable_tick_type = 4
; targ is filled in strundow() with the ticker for which the trading suite is being prepared.
; It needs to be pre-existing - it doesn't matter what the prior value is here.
targ = None
; If training/validating you will probably want a copy of the column names for
; the calculated series matrix, so this would be y. But n is fine for running live.
print_series_names = y

; Training file names.			
fins = trainsell.csv,trainbuy.csv,validbuy.csv,validsell.csv
; The training and validation files are for the original training calcluated
; series. These files are rewritten with the fins_prefix, after some
; processing. For instance the first fins_ignore intervals
; are all zeros because of the min_window, minimum interval, required
; to calculate the calculated series. An improvement would be to prefix
; the basic series with Brownian bridges.
fins_prefix =  aaa
fins_ignore = 9
; In last_calc_field we must provide the
; sequentially last calculated series
; label identifying an integer that identifies the last calculated series.
; It is key to the struct_calc.py module clo dictionary. This is required both when training
; and running live.
last_calc_field = log10_log_NVDA
; write_adaboost is currently only accessed in strun_live.py, so having it
; set y doesn't interfere with training. But training will likely in the future involve
write_adaboost = y
write_adaboost_sim = n
prob_filter_nvda = 0.625
menbuynvda = /home/alan2/dev/wip/microtree60/buy_sell_csv_prep/aamenbuyNVDA.csv
mensellnvda = /home/alan2/dev/wip/microtree60/buy_sell_csv_prep/aamensellNVDA.csv
rootbuynvda = /home/alan2/dev/resources/matcsvs/september292024_60NVDA/pyb/
rootsellnvda = /home/alan2/dev/resources/matcsvs/september062024_60NVDA/pyb/
results_buy_nvda = results_buy_NVDA60.txt
results_sell_nvda = results_sell_NVDA60.txt

prob_filter_smci = 0.625
menbuysmci = /home/alan2/dev/wip/microtreec/buy_sell_csv_prep/aamenbuySMCI.csv
mensellsmci = /home/alan2/dev/wip/microtreec/buy_sell_csv_prep/aamensellSMCI.csv
rootbuysmci = /home/alan2/dev/resources/matcsvs/september062024SMCI/pyb/
rootsellsmci = /home/alan2/dev/resources/matcsvs/september062024SMCI/pyb/
results_buy_smci = results_buy_SMCI.txt
results_sell_smci = results_sell_SMCI.txt

prob_filter_avgo = 0.625
menbuyavgo = /home/alan2/dev/wip/microtreec/buy_sell_csv_prep/aamenbuyAVGO.csv
mensellavgo = /home/alan2/dev/wip/microtreec/buy_sell_csv_prep/aamensellAVGO.csv
rootbuyavgo = /home/alan2/dev/resources/matcsvs/september062024AVGO/pyb/
rootsellavgo = /home/alan2/dev/resources/matcsvs/september062024AVGO/pyb/
results_buy_avgo = results_buy_AVGO.txt
results_sell_avgo = results_sell_AVGO.txt

prob_filter_msft = 0.625
menbuymsft = /home/alan2/dev/wip/microtree60/buy_sell_csv_prep/aamenbuyMSFT.csv
mensellmsft = /home/alan2/dev/wip/microtree60/buy_sell_csv_prep/aamensellMSFT.csv
rootbuymsft = /home/alan2/dev/resources/matcsvs/september292024_60MSFT/pyb/
rootsellmsft = /home/alan2/dev/resources/matcsvs/september292024_60MSFT/pyb/
results_buy_msft = results_buy_MSFT60.txt
results_sell_msft = results_sell_MSFT60.txt

prob_filter_wmt = 0.625
menbuywmt = /home/alan2/dev/wip/microtree60/buy_sell_csv_prep/aamenbuyWMT.csv
mensellwmt = /home/alan2/dev/wip/microtree60/buy_sell_csv_prep/aamensellWMT.csv
rootbuywmt = /home/alan2/dev/resources/matcsvs/september292024_60WMT/pyb/
rootsellwmt = /home/alan2/dev/resources/matcsvs/september292024_60WMT/pyb/
results_buy_wmt = results_buy_WMT60.txt
results_sell_wmt = results_sell_WMT60.txt

prob_filter_qqq = 0.625
menbuyqqq = /home/alan2/dev/wip/microtreec/buy_sell_csv_prep/aamenbuyQQQ.csv
mensellqqq = /home/alan2/dev/wip/microtreec/buy_sell_csv_prep/aamensellQQQ.csv
rootbuyqqq = /home/alan2/dev/resources/matcsvs/september062024QQQ/pyb/
rootsellqqq = /home/alan2/dev/resources/matcsvs/september062024QQQ/pyb/
results_buy_qqq = results_buy_QQQ.txt
results_sell_qqq = results_sell_QQQ.txt

prob_filter_spy = 0.625
menbuyspy = /home/alan2/dev/wip/microtreec/buy_sell_csv_prep/aamenbuySPY.csv
mensellspy = /home/alan2/dev/wip/microtreec/buy_sell_csv_prep/aamensellSPY.csv
rootbuyspy = /home/alan2/dev/resources/matcsvs/september062024SPY/pyb/
rootsellspy = /home/alan2/dev/resources/matcsvs/september062024SPY/pyb/
results_buy_spy = results_buy_SPY.txt
results_sell_spy = results_sell_SPY.txt

prob_filter_dia = 0.625
menbuydia = /home/alan2/dev/wip/microtreec/buy_sell_csv_prep/aamenbuyDIA.csv
menselldia = /home/alan2/dev/wip/microtreec/buy_sell_csv_prep/aamensellDIA.csv
rootbuydia = /home/alan2/dev/resources/matcsvs/september062024DIA/pyb/
rootselldia = /home/alan2/dev/resources/matcsvs/september062024DIA/pyb/
results_buy_dia = results_buy_DIA.txt
results_sell_dia = results_sell_DIA.txt
